{"version":3,"sources":["Components/Home/Home.jsx","serviceWorker.js","index.js"],"names":["Main","react_default","a","createElement","id","className","Object","defineProperty","href","target","canvas","document","querySelector","ctx","getContext","particles","amount","mouse","colors","name","ww","width","window","innerWidth","wh","height","innerHeight","Particle","x","y","this","Math","random","dest","r","vx","vy","accX","accY","friction","color","floor","prototype","render","fillStyle","beginPath","arc","PI","fill","b","sqrt","radius","clearRect","font","textAlign","fillText","data","getImageData","globalCompositeOperation","i","round","j","push","length","initScene","requestAnimationFrame","Component","Boolean","location","hostname","match","ReactDOM","BrowserRouter","Home_Home","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59e8bdea.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Link} from 'react-router-dom';\n\nimport './Home.css';\n\nclass Main extends Component {\n  render() {\n    return (\n      <div>\n          {/* Particles Name */}\n          <div id=\"name-particles\">\n            <canvas id=\"scene\"></canvas>\n          </div>\n          {/* Nav Bar */}\n          <div className=\"table\">\n            <nav id=\"nav-bar\" className=\"cl-effect-9\">\n              <a className=\"link\" href=\"https://github.com/gkeglevich\" target=\"_blank\" className=\"link\"><span>GITHUB</span><span>For some projects</span></a>\n              <a className=\"link\" href=\"https://www.linkedin.com/in/griffinkeglevich/\" target=\"_blank\" className=\"link\"><span>LINKEDIN</span><span>For some particulars</span></a>\n              <a className=\"link\" href=\"https://medium.com/@griffinkeglevich\" target=\"_blank\"><span>MEDIUM</span><span>For some thoughts</span></a>\n            </nav>\n            {/* Add in router stuff later */}\n          </div>\n      </div>\n    );\n  }\n\n  componentDidMount() {\n    var canvas = document.querySelector(\"#scene\"),\n\t\tctx = canvas.getContext(\"2d\"),\n\t\tparticles = [],\n\t\tamount = 0,\n\t\tmouse = {x:0,y:0},\n\t\tradius = 0.2;\n\n\n    var colors = [\"#F5F5F5\"];\n\n    const name = \"Griffin Keglevich\";\n\n    var ww = canvas.width = window.innerWidth;\n    var wh = canvas.height = window.innerHeight;\n\n    function Particle(x,y){\n      this.x =  Math.random()*ww;\n      this.y =  Math.random()*wh;\n      this.dest = {\n        x : x,\n        y: y\n      };\n      this.r =  Math.random()*1 + 2;\n      this.vx = (Math.random()-0.5)*20;\n      this.vy = (Math.random()-0.5)*20;\n      this.accX = 0;\n      this.accY = 0;\n      this.friction = Math.random()*0.025 + 0.94;\n\n      this.color = colors[Math.floor(Math.random()*6)];\n    }\n\n    Particle.prototype.render = function() {\n      this.accX = (this.dest.x - this.x)/1000;\n      this.accY = (this.dest.y - this.y)/1000;\n      this.vx += this.accX;\n      this.vy += this.accY;\n      this.vx *= this.friction;\n      this.vy *= this.friction;\n\n      this.x += this.vx;\n      this.y +=  this.vy;\n\n      ctx.fillStyle = this.color;\n      ctx.beginPath();\n      ctx.arc(this.x, this.y, this.r, Math.PI * 2, false);\n      ctx.fill();\n\n      var a = this.x - mouse.x;\n      var b = this.y - mouse.y;\n\n      var distance = Math.sqrt( a*a + b*b );\n      if(distance<(radius*70)){\n        this.accX = (this.x - mouse.x)/100;\n        this.accY = (this.y - mouse.y)/100;\n        this.vx += this.accX;\n        this.vy += this.accY;\n      }\n\n    }\n\n    function initScene(){\n      ww = canvas.width = window.innerWidth;\n      wh = canvas.height = window.innerHeight;\n\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n      ctx.font = \"bold \"+(ww/10)+\"px Helvetica\";\n      ctx.textAlign = \"center\";\n      ctx.fillText(name, ww/2, wh/2);\n\n      var data  = ctx.getImageData(0, 0, ww, wh).data;\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      ctx.globalCompositeOperation = \"screen\";\n\n      const distance = 50;\n      particles = [];\n      for(var i=0; i<ww; i+=Math.round(ww/(distance*4))) {\n        for (var j=0;j<wh;j+=Math.round(ww/(distance*4))) {\n          if (data[((i + j*ww)*4) + 3] > distance) {\n            particles.push(new Particle(i,j));\n          }\n        }\n      }\n      amount = particles.length;\n\n    }\n\n    function render(a) {\n      requestAnimationFrame(render);\n      ctx.clearRect(0, 0, canvas.width, canvas.height);\n      for (var i = 0; i < amount; i++) {\n        particles[i].render();\n      }\n    };\n\n    // Also, make # of particles relative to screen size!\n    initScene();\n    requestAnimationFrame(render);\n  }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Home from './Components/Home/Home.jsx'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Home />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}